{"version":3,"sources":["src/config/graphql/index.tsx","src/components/common/TextInput/index.js","src/screens/Home/components/Chart.tsx","src/screens/Home/components/Table.tsx","src/screens/Home/components/Valuation.tsx","src/screens/Home/index.tsx","App.tsx"],"names":["ApolloProvider","children","client","ApolloClient","uri","cache","InMemoryCache","props","View","style","styles","container","containerStyle","label","labelContainer","Text","inputContainer","TextInput","outlineWidth","StyleSheet","create","padding","borderWidth","borderColor","borderRadius","fontWeight","color","revenue","gross","operating","net","data","labels","years","slice","length","datasets","width","Dimensions","get","height","yAxisLabel","chartConfig","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","opacity","marginVertical","header","tableContainer","map","v","i","head","Row","rowContainer","cellContainer","rowHead","flex","alignSelf","flexDirection","alignItems","justifyContent","React","useState","eps","toString","EPS","setEPS","per","PER","setPER","growth","setGrowth","value","setValue","useEffect","basicValue","Number","futureEPS","growthValue","Math","max","placeholder","onChangeText","text","num","isNaN","textInput","marginRight","flexWrap","symbol","setSymbol","useQuery","STOCK","variables","loading","error","arr","stock","payload","incomeStatement","operatingProfit","res","push","average","message","toUpperCase","Valuation","Chart","convertArrayStringToNumber","grossProfit","netProfit","Table","tableData","toPrecision","gql","array","sum","App","Home"],"mappings":"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","file":"static/js/app.72e8e139.chunk.js","sourcesContent":["import React from 'react'\nimport { ApolloClient, InMemoryCache, ApolloProvider as Provider } from '@apollo/client';\n\ninterface ApolloProviderProps{\n    children: any\n}\nexport const ApolloProvider = ({children}: ApolloProviderProps) => {\n    const client = new ApolloClient({\n        uri: \"https://saham-backend.herokuapp.com\",\n        cache: new InMemoryCache(),\n    })\n\n    return(\n        <Provider client={client}>\n            {children}\n        </Provider>\n    )\n}","import React from 'react'\nimport {TextInput, View, StyleSheet, Text} from 'react-native'\n\nexport default (props) => {\n    return(\n        <View style={[styles.container, props.containerStyle]}>\n            {props.label &&\n                <View style={[styles.labelContainer]}>\n                    <Text style={styles.label}>{props.label}</Text>\n                </View>\n            }\n            <View style={[styles.inputContainer]}>\n                <TextInput\n                    {...props}\n                    style={{outlineWidth:0}}\n                />\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        \n    },\n    labelContainer:{\n        padding:5\n    },\n    inputContainer:{\n        borderWidth:0.5,\n        borderColor:'#ccc',\n        borderRadius:5,\n        padding:10\n    },\n    label:{\n        fontWeight:'bold',\n        color:'grey'\n    }\n})","import React from 'react'\nimport {Dimensions} from 'react-native'\nimport {LineChart, BarChart} from 'react-native-chart-kit'\n\ninterface ChartProps {\n    revenue: number[]\n    gross: number[]\n    operating: number[]\n    net: number[]\n}\n\nexport default ({revenue, gross, operating, net}: ChartProps) => {\n    return(\n        <LineChart\n            data={{\n            labels: years.slice(0,revenue.length),\n            datasets: [\n                {\n                    data: revenue,\n                },\n                {\n                    data: gross,\n                },\n                {\n                    data: operating,\n                },\n                {\n                    data: net,\n                },\n            ],\n            }}\n            width={Dimensions.get('window').width - 100} // from react-native\n            height={220}\n            yAxisLabel={'Rs'}\n            chartConfig={{\n                backgroundColor: 'white',\n                backgroundGradientFrom: 'white',\n                backgroundGradientTo: 'white',\n                decimalPlaces: 0, // optional, defaults to 2dp\n                color: (opacity = 0) => `rgba(100, 0, 0, ${opacity})`,\n                style: {\n                    borderRadius: 16,\n                },  \n            }}\n            style={{\n                marginVertical: 8,\n                borderRadius: 16,\n            }}\n        />\n    )\n}\n\nconst years = [\"2020\",\"2019\",\"2018\",\"2017\",\"2016\",\"2015\",\"2014\",\"2013\",\"2012\",\"2011\",\n                \"2010\",\"2009\",\"2008\",\"2007\",\"2006\",\"2005\",\"2004\",\"2003\",\"2002\",\"2001\"]","import React from 'react'\nimport {View, Text, StyleSheet} from 'react-native'\n\ninterface TableProps {\n    header: string[]\n    data: any[][]\n}\n\nexport default ({header, data}: TableProps) => {\n    return (\n        <View style={styles.tableContainer}>\n            {data.map((v, i) => {\n                return (\n                    <Row\n                        head={header[i]}\n                        data={v}\n                    />\n                )\n            })}\n        </View>\n    )\n}\n\ninterface RowProps {\n    head: any\n    data: any[]\n}\n\nconst Row = ({head, data}: RowProps) => {\n    return(\n        <View style={styles.rowContainer}>\n            <View style={styles.cellContainer}>\n                <Text style={styles.rowHead}>{head}</Text>\n            </View>\n            {data.map((i) => (\n                <View style={styles.cellContainer}>\n                    <Text>{i}</Text>\n                </View>\n            ))}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    rowContainer:{\n        flex:1,\n        alignSelf:'stretch',\n        flexDirection:'row',\n    },\n    cellContainer:{\n        flex:1,\n        alignSelf:'stretch',\n        padding:10,\n        borderColor:'grey',\n        borderWidth:1\n    },\n    tableContainer:{\n        alignSelf:'stretch',\n        alignItems:'center',\n        justifyContent:'center',\n    },\n    rowHead:{\n        fontWeight:'bold'\n    }\n})","import React from 'react'\nimport {View, Text, StyleSheet} from 'react-native'\nimport TextInput from '../../../components/common/TextInput'\n\ninterface ValuationProps{\n    eps: number\n    per: number\n    growth: number\n}\n\nexport default (props: ValuationProps) => {\n    const [EPS, setEPS] = React.useState(props.eps.toString())\n    const [PER, setPER] = React.useState(props.per.toString())\n    const [growth, setGrowth] = React.useState(props.growth.toString())\n    const [value, setValue] = React.useState(0)\n\n    const handlePERChanged = (text: string) => {\n        if (text[text.length-1] == \".\"){\n            setPER(text)\n            return\n        }\n        const num = Number(text)\n        if (!Number.isNaN(num)) {\n            setPER(text)\n        }\n    }\n\n    const handleEPSChanged = (text: string) => {\n        if (text[text.length-1] == \".\"){\n            setEPS(text)\n            return\n        }\n        const num = Number(text)\n        if (!Number.isNaN(num)) {\n            setEPS(text)\n        }\n    }\n\n    const handleGrowthChanged = (text: string) => {\n        if (text[text.length-1] == \".\"){\n            setGrowth(text)\n        }\n        const num = Number(text)\n        if (!Number.isNaN(num)) {\n            setGrowth(text)\n        }\n    }\n\n    React.useEffect(() => {\n        const basicValue = Number(EPS)*Number(PER)\n        let futureEPS = Number(EPS)\n        for (let i = 0; i < 10; i++) {\n            futureEPS *= 1+(Number(growth)/100)\n            \n        }\n        const growthValue = futureEPS/4*Number(PER)\n        setValue(Math.max(basicValue, growthValue))\n    }, [EPS, PER, growth])\n\n    return(\n        <View>\n            <Text>Fair Price: {value}</Text>\n            <Text>Buyback Price: {value*3/4}</Text>\n            <Text>Buy Price: {value*2/3}</Text>\n            <Text>Discount Price: {value/2}</Text>\n            <View style={styles.inputContainer}>\n                <TextInput\n                    label=\"EPS\"\n                    placeholder=\"EPS\"\n                    value={EPS}\n                    onChangeText={handleEPSChanged}\n                    containerStyle={styles.textInput}\n                />\n                <TextInput\n                    label=\"PER\"\n                    placeholder=\"PER\"\n                    value={PER}\n                    onChangeText={handlePERChanged}\n                    containerStyle={styles.textInput}\n                />\n                <TextInput\n                    label=\"Growth\"\n                    placeholder=\"Growth\"\n                    value={growth}\n                    onChangeText={handleGrowthChanged}\n                    containerStyle={styles.textInput}\n                />\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    textInput:{\n        marginRight:10\n    },\n    inputContainer:{\n        flexDirection:'row',\n        flexWrap:'wrap'\n    }\n})","import React from 'react'\nimport {View, StyleSheet, Text} from 'react-native'\nimport TextInput from '../../components/common/TextInput'\nimport {gql, useQuery} from '@apollo/client'\nimport Chart from './components/Chart'\nimport Table from './components/Table'\nimport Valuation from './components/Valuation'\n\nexport default () => {\n    const [symbol, setSymbol] = React.useState(\"BBCA\")\n    const [growth, setGrowth] = React.useState(0)\n\n    const {data, loading, error} = useQuery(STOCK, {\n        variables:{\n            symbol: symbol\n        }\n    })\n\n    const handleSymbolChanged = (text: string) => {\n        setSymbol(text.toUpperCase())\n    }\n\n    const tableData = () => {\n        let arr: any[][] = []\n        let eps = data.stock.payload.incomeStatement.eps\n        let per = data.stock.payload.incomeStatement.per\n        arr.push(eps)\n        arr.push(per)\n        return arr\n    }\n\n    React.useEffect(() => {\n        if (loading) {\n            return\n        }\n        if (error) {\n            return\n        }\n        const arr = data.stock.payload.incomeStatement.operatingProfit\n        let res: number[] = []\n        for(let i = 0; i < arr.length-1; i++) {\n            res.push(((arr[i]-arr[i+1])/arr[i+1]*100))\n        }\n        setGrowth(average(res.slice(0, 5)))\n    }, [data])\n\n    if (error) {\n        return(\n            <View style={styles.container}>\n                <Text>{error.message}</Text>\n            </View>\n        )\n    }\n\n    return (\n        <View style={styles.container}>\n            <TextInput\n                label=\"Symbol\"\n                placeholder=\"Symbol\"\n                value={symbol}\n                onChangeText={handleSymbolChanged}\n            />\n            {\n                !loading && \n                <>\n                <Valuation\n                    eps={data.stock.payload.incomeStatement.eps[0]}\n                    per={data.stock.payload.incomeStatement.per[0]}\n                    growth={growth}\n                />\n                <Chart \n                    revenue={convertArrayStringToNumber(data.stock.payload.incomeStatement.revenue)}\n                    gross={convertArrayStringToNumber(data.stock.payload.incomeStatement.grossProfit)}\n                    operating={convertArrayStringToNumber(data.stock.payload.incomeStatement.operatingProfit)}\n                    net={convertArrayStringToNumber(data.stock.payload.incomeStatement.netProfit)}\n                />\n                <Table\n                    header={[\"EPS\", \"PER\"]}\n                    data={tableData()}\n                />\n                <Text>AVG 5Y Growth: {growth.toPrecision(3)}%</Text>\n                </>\n            }\n        </View>\n    )\n}\n\nconst STOCK = gql`\n    query($symbol:String!){\n        stock(symbol:$symbol){\n            payload{\n                symbol\n                incomeStatement{\n                    revenue\n                    grossProfit\n                    operatingProfit\n                    netProfit\n                    eps\n                    per\n                }\n            }\n        }\n    }\n`\n\nconst styles = StyleSheet.create({\n    container:{\n        flex:1,\n        padding:25,\n        alignItems:'flex-start'\n    }\n})\n\nconst convertArrayStringToNumber = (array : string[]) => {\n    return array.map((i) => {\n        return Number(i)\n    })\n}\n\nconst average = (array: number[]) => {\n    var sum = 0\n    array.map((v) => {\n        sum += v\n    })\n    return sum/array.length\n}","import React from 'react'\n\nimport { ApolloProvider } from './src/config/graphql'\nimport Home from './src/screens/Home'\n\nexport default function App() {\n  return (\n    <ApolloProvider>\n      <Home/>\n    </ApolloProvider>\n  )\n}\n"],"sourceRoot":""}