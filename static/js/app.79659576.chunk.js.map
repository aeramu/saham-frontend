{"version":3,"sources":["src/config/graphql/index.tsx","src/components/common/TextInput/index.js","src/screens/Home/components/Chart.tsx","src/screens/Home/components/Table.tsx","src/components/common/DataEntry/index.tsx","src/screens/Home/components/Valuation.tsx","src/screens/Home/index.tsx","App.tsx"],"names":["ApolloProvider","children","client","ApolloClient","uri","cache","InMemoryCache","props","View","style","styles","container","containerStyle","label","labelContainer","Text","inputContainer","TextInput","outlineWidth","StyleSheet","create","padding","borderWidth","borderColor","borderRadius","fontWeight","color","revenue","gross","operating","net","labels","data","datasets","width","length","height","chartConfig","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","labelColor","strokeWidth","formatYLabel","y","slice","marginVertical","header","tableContainer","map","v","i","head","Row","rowContainer","cellContainer","rowHead","flex","alignSelf","flexDirection","alignItems","justifyContent","name","value","divider","paddingHorizontal","paddingVertical","React","useState","setValue","eps","per","growth","useEffect","basicValue","Number","futureEPS","growthValue","Math","max","DataEntry","toFixed","symbol","setSymbol","setEPS","setPER","setGrowth","useQuery","STOCK","variables","loading","error","stock","isError","arr","payload","incomeStatement","operatingProfit","res","push","average","toString","avg","message","placeholder","onChangeText","text","toUpperCase","symbolInput","num","isNaN","textInput","ActivityIndicator","size","dataContainer","Valuation","valuation","ScrollView","horizontal","Dimensions","get","Chart","years","convertArrayStringToNumber","grossProfit","netProfit","Table","gql","flexWrap","marginTop","marginBottom","marginRight","array","sum","App","Home"],"mappings":"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","file":"static/js/app.79659576.chunk.js","sourcesContent":["import React from 'react'\nimport { ApolloClient, InMemoryCache, ApolloProvider as Provider } from '@apollo/client';\n\ninterface ApolloProviderProps{\n    children: any\n}\nexport const ApolloProvider = ({children}: ApolloProviderProps) => {\n    const client = new ApolloClient({\n        uri: \"https://saham-backend.herokuapp.com\",\n        cache: new InMemoryCache(),\n    })\n\n    return(\n        <Provider client={client}>\n            {children}\n        </Provider>\n    )\n}","import React from 'react'\nimport {TextInput, View, StyleSheet, Text} from 'react-native'\n\nexport default (props) => {\n    return(\n        <View style={[styles.container, props.containerStyle]}>\n            {props.label &&\n                <View style={[styles.labelContainer]}>\n                    <Text style={styles.label}>{props.label}</Text>\n                </View>\n            }\n            <View style={[styles.inputContainer]}>\n                <TextInput\n                    {...props}\n                    style={{outlineWidth:0}}\n                />\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        \n    },\n    labelContainer:{\n        padding:5\n    },\n    inputContainer:{\n        borderWidth:0.5,\n        borderColor:'#ccc',\n        borderRadius:5,\n        padding:10\n    },\n    label:{\n        fontWeight:'bold',\n        color:'grey'\n    }\n})","import React from 'react'\nimport {LineChart} from 'react-native-chart-kit'\n\ninterface ChartProps {\n    labels: string[]\n    revenue: number[]\n    gross: number[]\n    operating: number[]\n    net: number[]\n}\n\nexport default ({revenue, gross, operating, net, labels}: ChartProps) => {\n    return(\n        <LineChart\n            data={{\n                labels: labels,\n                datasets: [\n                    {\n                        data: revenue,\n                        color: () => ('blue')\n                    },\n                    {\n                        data: gross,\n                        color: () => ('red')\n                    },\n                    {\n                        data: operating,\n                        color: () => ('orange')\n                    },\n                    {\n                        data: net,\n                        color: () => ('green')\n                    },\n                ],\n            }}\n            width={50*labels.length}\n            height={220}\n            chartConfig={{\n                backgroundColor: 'white',\n                backgroundGradientFrom: 'white',\n                backgroundGradientTo: 'white',\n                decimalPlaces: 0,\n                color: () => 'grey',\n                labelColor: () => 'black',\n                strokeWidth: 2,\n            }}\n            formatYLabel={(y: string) => {\n                if (y.length > 13) {\n                    return y.slice(0, y.length-12) + 'T'    \n                }\n                else if (y.length > 10) {\n                    return y.slice(0, y.length-9) + 'B'  \n                }\n                else if (y.length > 7) {\n                    return y.slice(0, y.length-6) + 'M'  \n                }\n                else if (y.length > 4) {\n                    return y.slice(0, y.length-3) + 'K'  \n                }\n                return y\n            }}\n            style={{\n                marginVertical: 8,\n            }}\n        />\n    )\n}\n","import React from 'react'\nimport {View, Text, StyleSheet} from 'react-native'\n\ninterface TableProps {\n    header: string[]\n    data: any[][]\n}\n\nexport default ({header, data}: TableProps) => {\n    return (\n        <View style={styles.tableContainer}>\n            {data.map((v, i) => {\n                return (\n                    <Row\n                        head={header[i]}\n                        data={v}\n                    />\n                )\n            })}\n        </View>\n    )\n}\n\ninterface RowProps {\n    head: any\n    data: any[]\n}\n\nconst Row = ({head, data}: RowProps) => {\n    return(\n        <View style={styles.rowContainer}>\n            <View style={styles.cellContainer}>\n                <Text style={styles.rowHead}>{head}</Text>\n            </View>\n            {data.map((i) => (\n                <View style={styles.cellContainer}>\n                    <Text>{i}</Text>\n                </View>\n            ))}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    rowContainer:{\n        flex:1,\n        alignSelf:'stretch',\n        flexDirection:'row',\n    },\n    cellContainer:{\n        flex:1,\n        alignSelf:'stretch',\n        padding:10,\n        width:100,\n        borderColor:'grey',\n        borderWidth:1\n    },\n    tableContainer:{\n        alignSelf:'stretch',\n        alignItems:'center',\n        justifyContent:'center',\n    },\n    rowHead:{\n        fontWeight:'bold'\n    }\n})","import React from 'react'\nimport {View, Text, StyleSheet, ViewStyle} from 'react-native'\n\ninterface Props {\n    name: string\n    value: string\n    style?: ViewStyle\n}\nexport default ({name, value, style}: Props) => {\n    return(\n        <View style={style}>\n            <View style={styles.container}>\n                <Text style={styles.name}>\n                    {name}\n                </Text>\n                <Text style={styles.value}>\n                    {value}\n                </Text>\n            </View>\n            <View style={styles.divider}/>\n        </View>\n        \n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        flexDirection:'row',\n        alignItems:'center',\n        justifyContent:'space-between',\n        paddingHorizontal:5,\n        paddingVertical:15,\n    },\n    value:{\n        fontWeight:'bold'\n    },\n    name:{\n        fontWeight:'bold',\n        color:'grey'\n    },\n    divider:{\n        height:1,\n        alignSelf:'stretch',\n        backgroundColor:'#ccc',\n    }\n})","import React from 'react'\nimport {View, Text, StyleSheet, ViewStyle} from 'react-native'\nimport TextInput from '../../../components/common/TextInput'\nimport DataEntry from '../../../components/common/DataEntry'\n\ninterface ValuationProps{\n    eps: string\n    per: string\n    growth: string\n    style?: ViewStyle\n}\n\nexport default (props: ValuationProps) => {\n    const [value, setValue] = React.useState(0)\n    const {eps, per, growth, style} = props\n\n    React.useEffect(() => {\n        const basicValue = Number(eps)*Number(per)\n        let futureEPS = Number(eps)\n        for (let i = 0; i < 10; i++) {\n            futureEPS *= 1+(Number(growth)/100)\n        }\n        const growthValue = futureEPS/4*Number(per)\n        setValue(Math.max(basicValue, growthValue))\n    }, [eps, per, growth])\n\n    return(\n        <View style={[styles.container, style]}>\n            <DataEntry\n                name=\"Fair Price\"\n                value={value.toFixed(2)}\n            />\n            <DataEntry\n                name=\"Buyback Price\"\n                value={(value*3/4).toFixed(2)}\n            />\n            <DataEntry\n                name=\"Buy Price\"\n                value={(value*2/3).toFixed(2)}\n            />\n            <DataEntry\n                name=\"Discount Price\"\n                value={(value/2).toFixed(2)}\n            />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n\n    }\n})","import React from 'react'\nimport {View, StyleSheet, Text, ScrollView, Dimensions, ActivityIndicator} from 'react-native'\nimport TextInput from '../../components/common/TextInput'\nimport {gql, useQuery} from '@apollo/client'\nimport Chart from './components/Chart'\nimport Table from './components/Table'\nimport Valuation from './components/Valuation'\n\nexport default () => {\n    const [symbol, setSymbol] = React.useState(\"BBCA\")\n    const [eps, setEPS] = React.useState(\"0\")\n    const [per, setPER] = React.useState(\"0\")\n    const [growth, setGrowth] = React.useState(\"0\")\n\n    const {data, loading, error} = useQuery(STOCK, {\n        variables:{\n            symbol: symbol\n        }\n    })\n\n    const handleSymbolChanged = (text: string) => {\n        setSymbol(text.toUpperCase())\n    }\n\n    const handlePERChange = (text: string) => {\n        if (text == \"-\") {\n            setPER(text)\n        }\n        const num = Number(text)\n        if (!Number.isNaN(num)) {\n            setPER(text)\n        }\n    }\n\n    const handleEPSChange = (text: string) => {\n        if (text == \"-\") {\n            setEPS(text)\n        }\n        const num = Number(text)\n        if (!Number.isNaN(num)) {\n            setEPS(text)\n        }\n    }\n\n    const handleGrowthChange = (text: string) => {\n        if (text == \"-\") {\n            setGrowth(text)\n        }\n        const num = Number(text)\n        if (!Number.isNaN(num)) {\n            setGrowth(text)\n        }\n    }\n\n    // growth\n    React.useEffect(() => {\n        if (loading || error || data.stock.error.isError) {\n            return\n        }\n        const arr = data.stock.payload.incomeStatement.operatingProfit\n        let res: number[] = []\n        for(let i = 0; i < arr.length-1; i++) {\n            res.push(((arr[i]-arr[i+1])/arr[i+1]*100))\n        }\n        setGrowth(average(res.slice(0, 5)).toFixed(2))\n    }, [data])\n\n    // eps\n    React.useEffect(() => {\n        if (loading || error || data.stock.error.isError) {\n            return\n        }\n        setEPS(data.stock.payload.incomeStatement.eps[0].toString())\n    }, [data])\n\n    // per\n    React.useEffect(() => {\n        if (loading || error || data.stock.error.isError) {\n            return\n        }\n        const arr: number[] = data.stock.payload.incomeStatement.per\n        let avg = 0\n        let length = 0\n        arr.map((v) => {\n            if (v > 0) {\n                avg += v\n                length++\n            }\n        })\n        avg /= length\n        setPER(avg.toFixed(2))\n    }, [data])\n\n    if (error) {\n        return(\n            <View style={styles.container}>\n                <Text>{error.message}</Text>\n            </View>\n        )\n    }\n\n    return (\n        <View style={styles.container}>\n            <TextInput\n                label=\"Symbol\"\n                placeholder=\"Symbol\"\n                value={symbol}\n                onChangeText={handleSymbolChanged}\n                containerStyle={styles.symbolInput}\n            />\n            <View style={styles.inputContainer}>\n                <TextInput\n                    label=\"EPS\"\n                    placeholder=\"EPS\"\n                    value={eps}\n                    onChangeText={handleEPSChange}\n                    containerStyle={styles.textInput}\n                />\n                <TextInput\n                    label=\"PER\"\n                    placeholder=\"PER\"\n                    value={per}\n                    onChangeText={handlePERChange}\n                    containerStyle={styles.textInput}\n                />\n                <TextInput\n                    label=\"Growth\"\n                    placeholder=\"Growth\"\n                    value={growth}\n                    onChangeText={handleGrowthChange}\n                    containerStyle={styles.textInput}\n                />\n            </View>\n            {loading\n                ?<ActivityIndicator style={styles.loading} size={30}/> \n                :<View style={styles.dataContainer}>\n                    <Valuation\n                        eps={eps}\n                        per={per}\n                        growth={growth}\n                        style={styles.valuation}\n                    />\n                    <ScrollView horizontal style={{width:Dimensions.get('window').width-50}}>\n                        <Chart\n                            labels={years.slice(0, data.stock.payload.incomeStatement.revenue.length)}\n                            revenue={convertArrayStringToNumber(data.stock.payload.incomeStatement.revenue)}\n                            gross={convertArrayStringToNumber(data.stock.payload.incomeStatement.grossProfit)}\n                            operating={convertArrayStringToNumber(data.stock.payload.incomeStatement.operatingProfit)}\n                            net={convertArrayStringToNumber(data.stock.payload.incomeStatement.netProfit)}\n                        />\n                    </ScrollView>\n                    <ScrollView horizontal style={{width:Dimensions.get('window').width-50}}>\n                        <Table\n                            header={[\"\", \"EPS\", \"PER\"]}\n                            data={[\n                                years.slice(0, data.stock.payload.incomeStatement.revenue.length),\n                                data.stock.payload.incomeStatement.eps, \n                                data.stock.payload.incomeStatement.per\n                            ]}\n                        />\n                    </ScrollView>\n                    <Text>AVG 5Y Growth: {growth}%</Text>\n                </View>\n            }\n        </View>\n    )\n}\n\nconst years = [\"2020\",\"2019\",\"2018\",\"2017\",\"2016\",\"2015\",\"2014\",\"2013\",\"2012\",\"2011\",\n                \"2010\",\"2009\",\"2008\",\"2007\",\"2006\",\"2005\",\"2004\",\"2003\",\"2002\",\"2001\"]\n\nconst STOCK = gql`\n    query($symbol:String!){\n        stock(symbol:$symbol){\n            payload{\n                symbol\n                incomeStatement{\n                    revenue\n                    grossProfit\n                    operatingProfit\n                    netProfit\n                    eps\n                    per\n                }\n            }\n            error{\n                isError\n            }\n        }\n    }\n`\n\nconst styles = StyleSheet.create({\n    container:{\n        flex:1,\n        padding:25,\n    },\n    inputContainer:{\n        flexDirection:'row',\n        flexWrap:'wrap',\n        marginTop:5,\n        marginBottom:5,\n    },\n    dataContainer:{\n\n    },\n    textInput:{\n        marginRight:10\n    },\n    symbolInput:{\n        alignSelf:'flex-start'\n    },\n    valuation:{\n        marginBottom: 10,\n        width: Dimensions.get('window').width > 500 ? 400 : '100%'\n    },\n    loading:{\n        marginTop:30,\n    }\n})\n\nconst convertArrayStringToNumber = (array : string[]) => {\n    return array.map((i) => {\n        return Number(i)\n    })\n}\n\nconst average = (array: number[]) => {\n    var sum = 0\n    array.map((v) => {\n        sum += v\n    })\n    return sum/array.length\n}","import React from 'react'\n\nimport { ApolloProvider } from './src/config/graphql'\nimport Home from './src/screens/Home'\n\nexport default function App() {\n  return (\n    <ApolloProvider>\n      <Home/>\n    </ApolloProvider>\n  )\n}\n"],"sourceRoot":""}