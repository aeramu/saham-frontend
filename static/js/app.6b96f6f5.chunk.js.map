{"version":3,"sources":["src/config/graphql/index.tsx","src/components/common/TextInput/index.js","src/screens/Home/components/Chart.tsx","src/components/common/DataEntry/index.tsx","src/screens/Home/components/Valuation.tsx","src/components/common/ToggleBox/index.tsx","src/screens/Home/components/Calculator.tsx","src/screens/Home/index.tsx","App.tsx"],"names":["ApolloProvider","children","client","ApolloClient","uri","cache","InMemoryCache","props","View","style","styles","container","containerStyle","label","labelContainer","Text","inputContainer","TextInput","outlineWidth","StyleSheet","create","padding","borderWidth","borderColor","borderRadius","fontWeight","color","revenue","gross","operating","net","labels","data","datasets","width","length","height","chartConfig","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","labelColor","strokeWidth","formatYLabel","y","slice","marginVertical","name","value","divider","flexDirection","alignItems","justifyContent","paddingHorizontal","paddingVertical","alignSelf","React","useState","setValue","eps","per","growth","useEffect","basicValue","Number","futureEPS","i","growthValue","Math","max","DataEntry","toFixed","title","initialToggle","isToggle","setIsToggle","TouchableHighlight","onPress","toggle","activeOpacity","box","overflow","margin","suffix","initialState","setResult","toggleList","setToggleList","sum","map","v","ToggleBox","toggleBox","index","arr","push","onToggle","symbol","setSymbol","setEPS","setPER","setGrowth","growthList","setGrowthList","useQuery","STOCK","variables","loading","error","stock","isError","payload","incomeStatement","operatingProfit","res","message","placeholder","onChangeText","text","toUpperCase","symbolInput","ActivityIndicator","size","dataContainer","num","isNaN","textInput","Calculator","Valuation","valuation","ScrollView","horizontal","Dimensions","get","Chart","years","convertArrayStringToNumber","grossProfit","netProfit","gql","flex","flexWrap","marginTop","marginBottom","marginRight","array","App","Home"],"mappings":"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","file":"static/js/app.6b96f6f5.chunk.js","sourcesContent":["import React from 'react'\nimport { ApolloClient, InMemoryCache, ApolloProvider as Provider } from '@apollo/client';\n\ninterface ApolloProviderProps{\n    children: any\n}\nexport const ApolloProvider = ({children}: ApolloProviderProps) => {\n    const client = new ApolloClient({\n        uri: \"https://saham-backend.herokuapp.com\",\n        cache: new InMemoryCache(),\n    })\n\n    return(\n        <Provider client={client}>\n            {children}\n        </Provider>\n    )\n}","import React from 'react'\nimport {TextInput, View, StyleSheet, Text} from 'react-native'\n\nexport default (props) => {\n    return(\n        <View style={[styles.container, props.containerStyle]}>\n            {props.label &&\n                <View style={[styles.labelContainer]}>\n                    <Text style={styles.label}>{props.label}</Text>\n                </View>\n            }\n            <View style={[styles.inputContainer]}>\n                <TextInput\n                    {...props}\n                    style={{outlineWidth:0}}\n                />\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        \n    },\n    labelContainer:{\n        padding:5\n    },\n    inputContainer:{\n        borderWidth:0.5,\n        borderColor:'#ccc',\n        borderRadius:5,\n        padding:10\n    },\n    label:{\n        fontWeight:'bold',\n        color:'grey'\n    }\n})","import React from 'react'\nimport {LineChart} from 'react-native-chart-kit'\n\ninterface ChartProps {\n    labels: string[]\n    revenue: number[]\n    gross: number[]\n    operating: number[]\n    net: number[]\n}\n\nexport default ({revenue, gross, operating, net, labels}: ChartProps) => {\n    return(\n        <LineChart\n            data={{\n                labels: labels,\n                datasets: [\n                    {\n                        data: revenue,\n                        color: () => ('blue')\n                    },\n                    {\n                        data: gross,\n                        color: () => ('red')\n                    },\n                    {\n                        data: operating,\n                        color: () => ('orange')\n                    },\n                    {\n                        data: net,\n                        color: () => ('green')\n                    },\n                ],\n            }}\n            width={50*labels.length}\n            height={220}\n            chartConfig={{\n                backgroundColor: 'white',\n                backgroundGradientFrom: 'white',\n                backgroundGradientTo: 'white',\n                decimalPlaces: 0,\n                color: () => 'grey',\n                labelColor: () => 'black',\n                strokeWidth: 2,\n            }}\n            formatYLabel={(y: string) => {\n                if (y.length > 13) {\n                    return y.slice(0, y.length-12) + 'T'    \n                }\n                else if (y.length > 10) {\n                    return y.slice(0, y.length-9) + 'B'  \n                }\n                else if (y.length > 7) {\n                    return y.slice(0, y.length-6) + 'M'  \n                }\n                else if (y.length > 4) {\n                    return y.slice(0, y.length-3) + 'K'  \n                }\n                return y\n            }}\n            style={{\n                marginVertical: 8,\n            }}\n        />\n    )\n}\n","import React from 'react'\nimport {View, Text, StyleSheet, ViewStyle} from 'react-native'\n\ninterface Props {\n    name: string\n    value: string\n    style?: ViewStyle\n}\nexport default ({name, value, style}: Props) => {\n    return(\n        <View style={style}>\n            <View style={styles.container}>\n                <Text style={styles.name}>\n                    {name}\n                </Text>\n                <Text style={styles.value}>\n                    {value}\n                </Text>\n            </View>\n            <View style={styles.divider}/>\n        </View>\n        \n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        flexDirection:'row',\n        alignItems:'center',\n        justifyContent:'space-between',\n        paddingHorizontal:5,\n        paddingVertical:15,\n    },\n    value:{\n        fontWeight:'bold'\n    },\n    name:{\n        fontWeight:'bold',\n        color:'grey'\n    },\n    divider:{\n        height:1,\n        alignSelf:'stretch',\n        backgroundColor:'#ccc',\n    }\n})","import React from 'react'\nimport {View, Text, StyleSheet, ViewStyle} from 'react-native'\nimport TextInput from '../../../components/common/TextInput'\nimport DataEntry from '../../../components/common/DataEntry'\n\ninterface ValuationProps{\n    eps: string\n    per: string\n    growth: string\n    style?: ViewStyle\n}\n\nexport default (props: ValuationProps) => {\n    const [value, setValue] = React.useState(0)\n    const {eps, per, growth, style} = props\n\n    React.useEffect(() => {\n        const basicValue = Number(eps)*Number(per)\n        let futureEPS = Number(eps)\n        for (let i = 0; i < 10; i++) {\n            futureEPS *= 1+(Number(growth)/100)\n        }\n        const growthValue = futureEPS/4*Number(per)\n        setValue(Math.max(basicValue, growthValue))\n    }, [eps, per, growth])\n\n    return(\n        <View style={[styles.container, style]}>\n            <DataEntry\n                name=\"Fair Price\"\n                value={value.toFixed(2)}\n            />\n            <DataEntry\n                name=\"Buyback Price\"\n                value={(value*3/4).toFixed(2)}\n            />\n            <DataEntry\n                name=\"Buy Price\"\n                value={(value*2/3).toFixed(2)}\n            />\n            <DataEntry\n                name=\"Discount Price\"\n                value={(value/2).toFixed(2)}\n            />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n\n    }\n})","import React from 'react'\nimport {Text, TouchableHighlight, View, ViewStyle, StyleSheet} from 'react-native'\n\ninterface Props {\n    title: string\n    toggle?: (bool: boolean) => void\n    initialToggle?: boolean\n    style?: ViewStyle\n}\n\nexport default (props: Props) => {\n    const {title, style} = props\n    const [isToggle, setIsToggle] = React.useState(props.initialToggle || false)\n\n    const toggle = () => {\n        props.toggle && props.toggle(!isToggle)\n        setIsToggle(!isToggle)\n    }\n\n    return (\n        <TouchableHighlight\n            onPress={toggle}\n            style={[style, styles.container]}\n            activeOpacity={1}\n        >\n            <View style={[style, styles.box, {backgroundColor: isToggle? '#999' : '#ddd'}]}>\n                <Text style={{color: isToggle? 'white' : 'black'}}>{title}</Text>\n            </View>\n        </TouchableHighlight>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        paddingHorizontal: 0,\n        paddingVertical: 0,\n        overflow:'hidden'\n    },\n    box:{\n        margin: 0\n    }\n})","import React from 'react'\nimport {View, StyleSheet, Text} from 'react-native'\nimport ToggleBox from '../../../components/common/ToggleBox'\n\ninterface Props {\n    data: number[]\n    setResult?: (num: number) => void\n    initialState?: boolean[]\n    suffix?: string\n}\n\nexport default ({data, suffix, initialState, setResult}: Props) => {\n    const [toggleList, setToggleList] = React.useState<boolean[]>(initialState || [])\n\n    const onToggle = (index: number, value: boolean) => {\n        let arr: boolean[] = []\n        toggleList.map((v) => {\n            arr.push(v)\n        })\n        arr[index] = value\n        setToggleList(arr)\n    }\n\n    React.useEffect(() => {\n        let sum = 0\n        let length = 0\n        data.map((v, i) => {\n            if (toggleList[i]){\n                sum += v\n                length++\n            }\n        })\n        setResult && setResult(sum/length)\n    }, [data, toggleList])\n\n    return(\n        <View style={styles.container}>\n            {data.map((v, i) => (\n                <ToggleBox\n                    title={v.toFixed(1) + (suffix || \"\")}\n                    style={styles.toggleBox}\n                    toggle={(v) => {\n                        onToggle(i, v)\n                    }}\n                    initialToggle={toggleList[i]}\n                />\n            ))}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        flexDirection:'row'\n    },\n    toggleBox:{\n        paddingHorizontal:20,\n        paddingVertical:10,\n        alignItems:'center',\n        borderRadius:5,\n        width:80,\n        margin:5,\n    },\n})","import React from 'react'\nimport {View, StyleSheet, Text, ScrollView, Dimensions, ActivityIndicator} from 'react-native'\nimport TextInput from '../../components/common/TextInput'\nimport {gql, useQuery} from '@apollo/client'\nimport Chart from './components/Chart'\nimport Table from './components/Table'\nimport Valuation from './components/Valuation'\nimport Calculator from './components/Calculator'\n\nexport default () => {\n    const [symbol, setSymbol] = React.useState(\"BBCA\")\n    const [eps, setEPS] = React.useState(\"0\")\n    const [per, setPER] = React.useState(\"0\")\n    const [growth, setGrowth] = React.useState(\"0\")\n    const [growthList, setGrowthList] = React.useState<number[]>([0])\n\n    const {data, loading, error} = useQuery(STOCK, {\n        variables:{\n            symbol: symbol\n        }\n    })\n\n    const handleSymbolChanged = (text: string) => {\n        setSymbol(text.toUpperCase())\n    }\n\n    const handlePERChange = (text: string) => {\n        if (text == \"-\") {\n            setPER(text)\n        }\n        const num = Number(text)\n        if (!Number.isNaN(num)) {\n            setPER(text)\n        }\n    }\n\n    const handleEPSChange = (text: string) => {\n        if (text == \"-\") {\n            setEPS(text)\n        }\n        const num = Number(text)\n        if (!Number.isNaN(num)) {\n            setEPS(text)\n        }\n    }\n\n    const handleGrowthChange = (text: string) => {\n        if (text == \"-\") {\n            setGrowth(text)\n        }\n        const num = Number(text)\n        if (!Number.isNaN(num)) {\n            setGrowth(text)\n        }\n    }\n\n    // growth\n    React.useEffect(() => {\n        if (loading || error || data.stock.error.isError) {\n            return\n        }\n        const arr = data.stock.payload.incomeStatement.operatingProfit\n        let res: number[] = []\n        for(let i = 0; i < arr.length-1; i++) {\n            res.push(((arr[i]-arr[i+1])/arr[i+1]*100))\n        }\n        setGrowthList(res)\n    }, [data])\n\n    if (error) {\n        return(\n            <View style={styles.container}>\n                <Text>{error.message}</Text>\n            </View>\n        )\n    }\n\n    return (\n        <View style={styles.container}>\n            <TextInput\n                label=\"Symbol\"\n                placeholder=\"Symbol\"\n                value={symbol}\n                onChangeText={handleSymbolChanged}\n                containerStyle={styles.symbolInput}\n            />\n            {loading\n                ?<ActivityIndicator style={styles.loading} size={30}/> \n                :<View style={styles.dataContainer}>\n                    <TextInput\n                        label=\"EPS\"\n                        placeholder=\"EPS\"\n                        value={eps}\n                        onChangeText={handleEPSChange}\n                        containerStyle={styles.textInput}\n                    />\n                    <Calculator\n                        data={data.stock.payload.incomeStatement.eps}\n                        setResult={(num) => setEPS(num.toFixed(2))}\n                        initialState={[true]}\n                    />\n                    <TextInput\n                        label=\"PER\"\n                        placeholder=\"PER\"\n                        value={per}\n                        onChangeText={handlePERChange}\n                        containerStyle={styles.textInput}\n                    />\n                    <Calculator\n                        data={data.stock.payload.incomeStatement.per}\n                        suffix='x'\n                        setResult={(num) => setPER(num.toFixed(2))}\n                        initialState={[true, true, true, true, true, true, true, true, true, true]}\n                    />\n                    <TextInput\n                        label=\"Growth\"\n                        placeholder=\"Growth\"\n                        value={growth}\n                        onChangeText={handleGrowthChange}\n                        containerStyle={styles.textInput}\n                    />\n                    <Calculator\n                        data={growthList}\n                        suffix='%'\n                        setResult={(num) => setGrowth(num.toFixed(2))}\n                        initialState={[true, true, true, true, true]}\n                    />\n                    <Valuation\n                        eps={eps}\n                        per={per}\n                        growth={growth}\n                        style={styles.valuation}\n                    />\n                    <ScrollView horizontal style={{width:Dimensions.get('window').width-50}}>\n                        <Chart\n                            labels={years.slice(0, data.stock.payload.incomeStatement.revenue.length)}\n                            revenue={convertArrayStringToNumber(data.stock.payload.incomeStatement.revenue)}\n                            gross={convertArrayStringToNumber(data.stock.payload.incomeStatement.grossProfit)}\n                            operating={convertArrayStringToNumber(data.stock.payload.incomeStatement.operatingProfit)}\n                            net={convertArrayStringToNumber(data.stock.payload.incomeStatement.netProfit)}\n                        />\n                    </ScrollView>\n                </View>\n            }\n        </View>\n    )\n}\n\nconst years = [\"2020\",\"2019\",\"2018\",\"2017\",\"2016\",\"2015\",\"2014\",\"2013\",\"2012\",\"2011\",\n                \"2010\",\"2009\",\"2008\",\"2007\",\"2006\",\"2005\",\"2004\",\"2003\",\"2002\",\"2001\"]\n\nconst STOCK = gql`\n    query($symbol:String!){\n        stock(symbol:$symbol){\n            payload{\n                symbol\n                incomeStatement{\n                    revenue\n                    grossProfit\n                    operatingProfit\n                    netProfit\n                    eps\n                    per\n                }\n            }\n            error{\n                isError\n            }\n        }\n    }\n`\n\nconst styles = StyleSheet.create({\n    container:{\n        flex:1,\n        padding:25,\n    },\n    inputContainer:{\n        flexDirection:'row',\n        flexWrap:'wrap',\n        marginTop:5,\n        marginBottom:5,\n    },\n    dataContainer:{\n\n    },\n    textInput:{\n        marginRight:10,\n        alignSelf:'flex-start'\n    },\n    symbolInput:{\n        alignSelf:'flex-start'\n    },\n    valuation:{\n        marginBottom: 10,\n        width: Dimensions.get('window').width > 500 ? 400 : '100%'\n    },\n    loading:{\n        marginTop:30,\n    }\n})\n\nconst convertArrayStringToNumber = (array : string[]) => {\n    return array.map((i) => {\n        return Number(i)\n    })\n}\n\nconst average = (array: number[]) => {\n    var sum = 0\n    array.map((v) => {\n        sum += v\n    })\n    return sum/array.length\n}","import React from 'react'\n\nimport { ApolloProvider } from './src/config/graphql'\nimport Home from './src/screens/Home'\n\nexport default function App() {\n  return (\n    <ApolloProvider>\n      <Home/>\n    </ApolloProvider>\n  )\n}\n"],"sourceRoot":""}